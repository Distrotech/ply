{"name":"Ply","tagline":"Python Lex-Yacc","body":"PLY (Python Lex-Yacc)                   Version 3.5\r\n\r\nCopyright (C) 2001-2012,\r\nDavid M. Beazley (Dabeaz LLC)\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n* Redistributions of source code must retain the above copyright notice,\r\n  this list of conditions and the following disclaimer.  \r\n* Redistributions in binary form must reproduce the above copyright notice, \r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.  \r\n* Neither the name of the David Beazley or Dabeaz LLC may be used to\r\n  endorse or promote products derived from this software without\r\n  specific prior written permission. \r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nIntroduction\r\n============\r\n\r\nPLY is a 100% Python implementation of the common parsing tools lex\r\nand yacc. Here are a few highlights:\r\n\r\n -  PLY is very closely modeled after traditional lex/yacc.\r\n    If you know how to use these tools in C, you will find PLY\r\n    to be similar.\r\n\r\n -  PLY provides *very* extensive error reporting and diagnostic \r\n    information to assist in parser construction.  The original\r\n    implementation was developed for instructional purposes.  As\r\n    a result, the system tries to identify the most common types\r\n    of errors made by novice users.  \r\n\r\n -  PLY provides full support for empty productions, error recovery,\r\n    precedence specifiers, and moderately ambiguous grammars.\r\n\r\n -  Parsing is based on LR-parsing which is fast, memory efficient, \r\n    better suited to large grammars, and which has a number of nice\r\n    properties when dealing with syntax errors and other parsing problems.\r\n    Currently, PLY builds its parsing tables using the LALR(1)\r\n    algorithm used in yacc.\r\n\r\n -  PLY uses Python introspection features to build lexers and parsers.  \r\n    This greatly simplifies the task of parser construction since it reduces \r\n    the number of files and eliminates the need to run a separate lex/yacc \r\n    tool before running your program.\r\n\r\n -  PLY can be used to build parsers for \"real\" programming languages.\r\n    Although it is not ultra-fast due to its Python implementation,\r\n    PLY can be used to parse grammars consisting of several hundred\r\n    rules (as might be found for a language like C).  The lexer and LR \r\n    parser are also reasonably efficient when parsing typically\r\n    sized programs.  People have used PLY to build parsers for\r\n    C, C++, ADA, and other real programming languages.\r\n\r\nHow to Use\r\n==========\r\n\r\nPLY consists of two files : lex.py and yacc.py.  These are contained\r\nwithin the 'ply' directory which may also be used as a Python package.\r\nTo use PLY, simply copy the 'ply' directory to your project and import\r\nlex and yacc from the associated 'ply' package.  For example:\r\n\r\n     import ply.lex as lex\r\n     import ply.yacc as yacc\r\n\r\nAlternatively, you can copy just the files lex.py and yacc.py\r\nindividually and use them as modules.  For example:\r\n\r\n     import lex\r\n     import yacc\r\n\r\nThe file setup.py can be used to install ply using distutils.\r\n\r\nThe file doc/ply.html contains complete documentation on how to use\r\nthe system.\r\n\r\nThe example directory contains several different examples including a\r\nPLY specification for ANSI C as given in K&R 2nd Ed.   \r\n\r\nA simple example is found at the end of this document\r\n\r\nRequirements\r\n============\r\nPLY requires the use of Python 2.2 or greater.  However, you should\r\nuse the latest Python release if possible.  It should work on just\r\nabout any platform.  PLY has been tested with both CPython and Jython.\r\nIt also seems to work with IronPython.\r\n\r\nResources\r\n=========\r\nMore information about PLY can be obtained on the PLY webpage at:\r\n\r\n     http://www.dabeaz.com/ply\r\n\r\nFor a detailed overview of parsing theory, consult the excellent\r\nbook \"Compilers : Principles, Techniques, and Tools\" by Aho, Sethi, and\r\nUllman.  The topics found in \"Lex & Yacc\" by Levine, Mason, and Brown\r\nmay also be useful.\r\n\r\nA Google group for PLY can be found at\r\n\r\n     http://groups.google.com/group/ply-hack\r\n\r\nAcknowledgments\r\n===============\r\nA special thanks is in order for all of the students in CS326 who\r\nsuffered through about 25 different versions of these tools :-).\r\n\r\nThe CHANGES file acknowledges those who have contributed patches.\r\n\r\nElias Ioup did the first implementation of LALR(1) parsing in PLY-1.x. \r\nAndrew Waters and Markus Schoepflin were instrumental in reporting bugs\r\nand testing a revised LALR(1) implementation for PLY-2.0.\r\n\r\nSpecial Note for PLY-3.0\r\n========================\r\nPLY-3.0 the first PLY release to support Python 3. However, backwards\r\ncompatibility with Python 2.2 is still preserved. PLY provides dual\r\nPython 2/3 compatibility by restricting its implementation to a common\r\nsubset of basic language features. You should not convert PLY using\r\n2to3--it is not necessary and may in fact break the implementation.\r\n\r\nExample\r\n=======\r\n\r\nHere is a simple example showing a PLY implementation of a calculator\r\nwith variables.\r\n\r\n    # -----------------------------------------------------------------------------\r\n    # calc.py\r\n    #\r\n    # A simple calculator with variables.\r\n    # -----------------------------------------------------------------------------\r\n\r\n    tokens = (\r\n        'NAME','NUMBER',\r\n        'PLUS','MINUS','TIMES','DIVIDE','EQUALS',\r\n        'LPAREN','RPAREN',\r\n        )\r\n\r\n    # Tokens\r\n\r\n    t_PLUS    = r'\\+'\r\n    t_MINUS   = r'-'\r\n    t_TIMES   = r'\\*'\r\n    t_DIVIDE  = r'/'\r\n    t_EQUALS  = r'='\r\n    t_LPAREN  = r'\\('\r\n    t_RPAREN  = r'\\)'\r\n    t_NAME    = r'[a-zA-Z_][a-zA-Z0-9_]*'\r\n\r\n    def t_NUMBER(t):\r\n        r'\\d+'\r\n        t.value = int(t.value)\r\n        return t\r\n\r\n    # Ignored characters\r\n    t_ignore = \" \\t\"\r\n\r\n    def t_newline(t):\r\n        r'\\n+'\r\n        t.lexer.lineno += t.value.count(\"\\n\")\r\n\r\n    def t_error(t):\r\n        print(\"Illegal character '%s'\" % t.value[0])\r\n        t.lexer.skip(1)\r\n\r\n    # Build the lexer\r\n    import ply.lex as lex\r\n    lex.lex()\r\n\r\n    # Precedence rules for the arithmetic operators\r\n    precedence = (\r\n        ('left','PLUS','MINUS'),\r\n        ('left','TIMES','DIVIDE'),\r\n        ('right','UMINUS'),\r\n        )\r\n\r\n    # dictionary of names (for storing variables)\r\n    names = { }\r\n\r\n    def p_statement_assign(p):\r\n        'statement : NAME EQUALS expression'\r\n        names[p[1]] = p[3]\r\n\r\n    def p_statement_expr(p):\r\n        'statement : expression'\r\n        print(p[1])\r\n\r\n    def p_expression_binop(p):\r\n        '''expression : expression PLUS expression\r\n                      | expression MINUS expression\r\n                      | expression TIMES expression\r\n                      | expression DIVIDE expression'''\r\n        if p[2] == '+'  : p[0] = p[1] + p[3]\r\n        elif p[2] == '-': p[0] = p[1] - p[3]\r\n        elif p[2] == '*': p[0] = p[1] * p[3]\r\n        elif p[2] == '/': p[0] = p[1] / p[3]\r\n\r\n    def p_expression_uminus(p):\r\n        'expression : MINUS expression %prec UMINUS'\r\n        p[0] = -p[2]\r\n\r\n    def p_expression_group(p):\r\n        'expression : LPAREN expression RPAREN'\r\n        p[0] = p[2]\r\n\r\n    def p_expression_number(p):\r\n        'expression : NUMBER'\r\n        p[0] = p[1]\r\n\r\n    def p_expression_name(p):\r\n        'expression : NAME'\r\n        try:\r\n            p[0] = names[p[1]]\r\n        except LookupError:\r\n            print(\"Undefined name '%s'\" % p[1])\r\n            p[0] = 0\r\n\r\n    def p_error(p):\r\n        print(\"Syntax error at '%s'\" % p.value)\r\n\r\n    import ply.yacc as yacc\r\n    yacc.yacc()\r\n\r\n    while 1:\r\n        try:\r\n            s = raw_input('calc > ')   # use input() on Python 3\r\n        except EOFError:\r\n            break\r\n        yacc.parse(s)\r\n\r\n\r\nBug Reports and Patches\r\n=======================\r\nMy goal with PLY is to simply have a decent lex/yacc implementation\r\nfor Python.  As a general rule, I don't spend huge amounts of time\r\nworking on it unless I receive very specific bug reports and/or\r\npatches to fix problems. I also try to incorporate submitted feature\r\nrequests and enhancements into each new version.  To contact me about\r\nbugs and/or new features, please send email to dave@dabeaz.com.\r\n\r\nIn addition there is a Google group for discussing PLY related issues at\r\n\r\n    http://groups.google.com/group/ply-hack\r\n \r\n-- Dave\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}